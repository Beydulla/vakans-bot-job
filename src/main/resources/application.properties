spring.datasource.url= jdbc:postgresql://${db_host}:5432/${db_database}
spring.datasource.username=${db_username}
spring.datasource.password=${db_password}

spring.batch.jdbc.initialize-schema=always

server.port=8082

telegram.bot.username=VakanssBot
telegram.bot.token=${vakans_bot_token}


query.get.filter.list = SELECT f.tags, f.employer, f.Maximum_Salary, f.Minimum_Salary, t.CHAT_ID \
                        FROM filter f, telegram t \
                        where f.telegram_id = t.ID AND t.CONFIRMED = 1 and t.stage = 'FINISHED'

query.count.active.confirmation.key=SELECT COUNT(0) FROM telegram \
                                    WHERE CONFIRMATION_KEY = :CONFIRMATION_KEY \
                                    AND CURRENT_TIMESTAMP < EXPIRED_AT AND CONFIRMED = 0

query.update.confirmation.key=UPDATE TELEGRAM SET CONFIRMED = 1, CHAT_ID = :CHAT_ID \
                              WHERE CONFIRMATION_KEY = :CONFIRMATION_KEY AND  CURRENT_TIMESTAMP < EXPIRED_AT

query.get.last.vacancy.by.website=SELECT * FROM LAST_VACANCY WHERE WEBSITE = :WEBSITE

query.update.last.vacancy.by.website=UPDATE LAST_VACANCY SET LINK = :LINK WHERE WEBSITE = :WEBSITE

query.get.latest.vacancies.by.website=SELECT LINK FROM VACANCY WHERE WEBSITE = :WEBSITE AND CREATED_AT::DATE = NOW()::DATE

query.insert.new.vacancy.link=INSERT INTO VACANCY(LINK, WEBSITE) VALUES(:LINK, :WEBSITE)